#!/usr/bin/python
# script for sending fog alert from WRf fog patch for Abu Dhabi airport.
# sends alert as a mail .
# date:21/06/17

#############################################################################################################################
import sys ; import numpy as np ; import datetime as dt ; import xarray as xr ; import pandas as pd ; import shapefile ;   
#############################################################################################################################

main='/home/vkvalappil/Data/' ; scripts=main+'workspace/pythonscripts/' ; output=main+'oppModel/output/' 
inp='/home/oceanColor/Fog/WRFmodel_forecast/wrfouput_weatherforcast/Archivewrffogmaskwithbackground/'
 
shp_100=main+'/alert/alert/abudhabi_100km.shp' ; shp_50=main+'/alert/alert/abudhabi_50km.shp'
shp_10=main+'/alert/alert/abudhabi_10km.shp'   ; shp_arp=main+'/alert/alert/airport_poligon.shp'
shp_uae=main+'/alert/alert/uae/ARE_adm1.shp'
date=str(sys.argv[1]) 

#email_id=["mtemimi@masdar.ac.ae","mjweston@masdar.ac.ae","jzhao@masdar.ac.ae","nchaouch@masdar.ac.ae","vkvalappil@masdar.ac.ae"] 
email_id=["vkvalappil@masdar.ac.ae"]

##########################################################################################################################
def sendmail(message,email_list) :
           from smtplib import SMTP ; from smtplib import SMTPException ; 
           from email.mime.multipart import MIMEMultipart ; from email.mime.text import MIMEText      

           _from         =   "fog@masdar.ac.ae" ;
           _to           =   email_list;
           _sub          =   "Fog Alert (WRF CESAM LAB)  "
           _username     =   'fog' ;
           _password     =   'P@ssword778'
           _smtp         =   "mail.masdar.ac.ae:587" ;
           #_text_subtype = "plain"

           mail=MIMEMultipart()
           mail["Subject"]  =  _sub
           mail["From"]     =  _from
           mail["To"]       =  ','.join(_to)
           #body = MIMEMultipart('alternative')
           #body.attach(MIMEText(_content, _text_subtype ))
           mail.attach(MIMEText(message))
           try:
               smtpObj = SMTP(_smtp)
               #Identify yourself to GMAIL ESMTP server.
               smtpObj.ehlo()
               #Put SMTP connection in TLS mode and call ehlo again.
               smtpObj.starttls()
               smtpObj.ehlo()
               #Login to service
               smtpObj.login(user=_username, password=_password)
               #Send email
               smtpObj.sendmail(_from, _to, mail.as_string())
               #close connection and session.
               smtpObj.quit()
           except SMTPException as error:
               print "Using Gmail : Error: unable to send email :  {err}".format(err=error)   
               try:
                   _from         =   "fog.masdar@gmail.com" ;
                   _to           =   email_list;
                   _sub          =   "TAF (WRF CESAM LAB)  "
                    
                   #_content      =   "WRF TAF DATA"
                   _username     =   'fog.masdar' ;
                   _password     =   'fog@masdar123'
                   _smtp         =   "smtp.gmail.com:587" ;
                   #_text_subtype = "plain"
                   
                   mail=MIMEMultipart()
                   mail["Subject"]  =  _sub
                   mail["From"]     =  _from
                   mail["To"]       =  ','.join(_to)
                   mail.attach(MIMEText(message))
                   smtpObj = SMTP(_smtp)
                   #Identify yourself to GMAIL ESMTP server.
                   smtpObj.ehlo()
                   #Put SMTP connection in TLS mode and call ehlo again.
                   smtpObj.starttls()
                   smtpObj.ehlo()
                   #Login to service
                   smtpObj.login(user=_username, password=_password)
                   #Send email
                   smtpObj.sendmail(_from, _to, mail.as_string())
                   #close connection and session.
                   smtpObj.quit()

               except:
				  print 'error'
				  return "Error";
################################################################################################################################
def pixelsInsidePolygon(points,lattitude,longitude) :
           from matplotlib.path import Path ;
           mpath = Path( points ) ;  XY = np.dstack((longitude, lattitude)) ; XY_flat = XY.reshape((-1, 2))
           mask_flat = mpath.contains_points(XY_flat) ; mask = mask_flat.reshape(lattitude.shape) 
           return mask 
###################################################################################################################################
def mail_body(loc,time_ocs,time_ist,loc1) :

    alert_body="""
This email is automatically generated by Masdar's fog detection and forecast system. 
    
This warning is to advise that fog may occur {} Abu Dhabi Airport for the below shown time intervels. 
{} (The earliest time of the presence within {})       

{} 

Further details are available on the portal: http://earth.masdar.ac.ae/fog/

For comments and/or questions; please contact: 

Dr. Marouane Temimi, Ph.D., 
Associate Professor 
Masdar Institute of Science and Technology 
Email: mtemimi@masdar.ac.ae     """.format(loc,time_ist,loc1,',  '.join(time_ocs))
    return alert_body
#########################################################################################################################################
def mail_body_uae(time_ocs,time_ist) :
    
    alert_body="""
This email is automatically generated by Masdar's fog detection and forecast system. 
    
This warning is to advise that fog may occur in UAE for the below shown time intervels. 
{} (The earliest time of the presence within UAE)       

{} 

Further details are available on the portal: http://earth.masdar.ac.ae/fog/

For comments and/or questions; please contact: 

Dr. Marouane Temimi, Ph.D., 
Associate Professor 
Masdar Institute of Science and Technology 
Email: mtemimi@masdar.ac.ae     """.format(time_ist,',  '.join(time_ocs))
    return alert_body
     
##################################################################################################################################
fileNme=inp+'wrfpost_'+date+'.nc'  ; nc_file=xr.open_dataset(fileNme)
fog_mask=nc_file['fog_mask'] ; lat=nc_file.lat ; lon=nc_file.lon ; time=nc_file.time
time=np.array([dt.datetime.strptime(str(tme),'%Y-%m-%d %H:%M:%S')  for tme in pd.to_datetime((nc_file.time.data))]) 

##############################################100 KM Aletrt ####################################################################

r=shapefile.Reader(shp_100) ; shapes = r.shapes() ;
#fields=r.fields ; records = np.array(r.records())
mask=pixelsInsidePolygon(shapes[0].points,lat,lon)

time_stamp=[] ; fog_flag=0
for ii in xrange(0,25):               #len(fog_mask)
    data_f=fog_mask[ii,:,:].data ; data_shp=data_f[mask] ; 

    if np.any(data_shp==1) :
        unique, counts =np.unique(data_shp, return_counts=True) ; cnt_flag=dict(zip(unique,counts)) ; 

        if cnt_flag[1]>80 :                                                    #79= 5% of total count ; (5.0/100)*len(data_shp)
                print "fog detected with in 100km Abu Dhabi airport"

                fog_flag=1 ; time_stamp.append(time[ii].strftime('%Y-%m-%d %H:%M:%S') + ' UTC') ;             
        else:
                print "fog detected in some pixels, but not enough to decide"           
    else:

        print "No fog detected: loop to next time step"
        
if fog_flag==1 :
    time_stampp=[x.replace(" ' ", " ") for x in time_stamp ]

    print "prepareing Fog report for 100 KM polygon"
   
    alert=mail_body('within 100 km from',time_stampp,time_stampp[0],'100 km')

    sendmail(alert,email_id)    
else:
    print "No fog detected: "
   
##################################################### 50 km Alert ##################################################################################

r=shapefile.Reader(shp_50) ; shapes = r.shapes() ;
#fields=r.fields ; records = np.array(r.records())
mask=pixelsInsidePolygon(shapes[0].points,lat,lon)

time_stamp=[] ; fog_flag=0
for ii in xrange(0,25):               #len(fog_mask)
    data_f=fog_mask[ii,:,:].data ; data_shp=data_f[mask] ; 
   
    if np.any(data_shp==1) :
        unique, counts =np.unique(data_shp, return_counts=True) ; cnt_flag=dict(zip(unique,counts)) ; 

        if cnt_flag[1]>20 :                                                    #79= 5% of total count ; (5.0/100)*len(data_shp)

                print "fog detected with in 50km Abu Dhabi airport"

                fog_flag=1 ; time_stamp.append(time[ii].strftime('%Y-%m-%d %H:%M:%S') + ' UTC')
                
        else:
                print "fog detected in some pixels, but not enough to decide"           
    else:
        print "No fog detected: loop to next time step"
       
if fog_flag==1 :
    time_stampp=[x.replace(" ' ", " ") for x in time_stamp ]
    
    print "prepareing Fog report for 50 KM polygon"
   
    alert=mail_body('within 50 km from',time_stampp,time_stampp[0],'50 km')
    
    sendmail(alert,email_id)    
else:
    print "No fog detected: "    

########################################################### 10 Km Alert ############################################################################

r=shapefile.Reader(shp_10) ; shapes = r.shapes() ;
#fields=r.fields ; records = np.array(r.records())
mask=pixelsInsidePolygon(shapes[0].points,lat,lon)

time_stamp=[] ; fog_flag=0
for ii in xrange(0,25):               #len(fog_mask)
    
    data_f=fog_mask[ii,:,:].data ; data_shp=data_f[mask] ; 
    
    if np.any(data_shp==1) :
        unique, counts =np.unique(data_shp, return_counts=True) ; cnt_flag=dict(zip(unique,counts)) ; 

        if cnt_flag[1]>3 :                              #changed from 0 to 3 as per Marouane's mail 31/07/2017

                print "fog detected with in 10km Abu Dhabi airport"

                fog_flag=1 ; time_stamp.append(time[ii].strftime('%Y-%m-%d %H:%M:%S') + ' UTC')                
        else:

                print "fog detected in some pixels, but not enough to decide"
            
    else:
        print "No fog detected: loop to next time step"
        
if fog_flag==1 :
    time_stampp=[x.replace(" ' ", " ") for x in time_stamp ]

    print "prepareing Fog report for 10 KM polygon"
   
    alert=mail_body('within 10 km from',time_stampp,time_stampp[0],'10 km')
    
    sendmail(alert,email_id)    
else:
    print "No fog detected: "

###################################################### Airport Location #######################################################################

r=shapefile.Reader(shp_arp) ; shapes = r.shapes() ;
#fields=r.fields ; records = np.array(r.records())
mask=pixelsInsidePolygon(shapes[0].points,lat,lon)
time_stamp=[] ; fog_flag=0
for ii in xrange(0,25):               #len(fog_mask)
    
    data_f=fog_mask[ii,:,:].data ; data_shp=data_f[mask] ; 
    
    if np.any(data_shp==1) :
        unique, counts =np.unique(data_shp, return_counts=True) ; cnt_flag=dict(zip(unique,counts)) ; 
    
        if cnt_flag[1]>0 :                                                    #79= 5% of total count ; (5.0/100)*len(data_shp)

                print "fog detected at Abu Dhabi airport"

                fog_flag=1 ; time_stamp.append(time[ii].strftime('%Y-%m-%d %H:%M:%S') + ' UTC')
                
        else:
                print "fog detected in some pixels, but not enough to decide"
            
    else:
        print "No fog detected: loop to next time step"
          
if fog_flag==1 :
    time_stampp=[x.replace(" ' ", " ") for x in time_stamp ]
 
    print "prepareing Fog report for airport polygon"
 
    alert=mail_body('at',time_stampp,time_stampp[0],'AUH')
    
    sendmail(alert,email_id)   
else:
    
    print "No fog detected: "    
###################################################################################################################################################
    
r=shapefile.Reader(shp_uae) ; shapes = r.shapes() ;
#fields=r.fields ; records = np.array(r.records())
mask=pixelsInsidePolygon(shapes[0].points,lat,lon)
time_stamp=[] ; fog_flag=0
for ii in xrange(0,25):               #len(fog_mask)
    
    data_f=fog_mask[ii,:,:].data ; data_shp=data_f[mask] ; 
    
    if np.any(data_shp==1) :
        unique, counts =np.unique(data_shp, return_counts=True) ; cnt_flag=dict(zip(unique,counts)) ; 
    
        if cnt_flag[1]>1 :                                                    #79= 5% of total count ; (5.0/100)*len(data_shp)

                print "fog detected in UAE"

                fog_flag=1 ; time_stamp.append(time[ii].strftime('%Y-%m-%d %H:%M:%S') + ' UTC')
                
        else:
                print "fog detected in some pixels, but not enough to decide"
            
    else:
        print "No fog detected: loop to next time step"
          
if fog_flag==1 :
    time_stampp=[x.replace(" ' ", " ") for x in time_stamp ]
 
    print "prepareing Fog report for uae polygon"
 
    alert=mail_body_uae(time_stampp,time_stampp[0])
    
    sendmail(alert,email_id)   
else:
    
    print "No fog detected: "        
    
    
#####################################################################################################################################################
    
    
    
quit() 